// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TWork.Models.Entities;

namespace TWork.Migrations
{
    [DbContext(typeof(TWorkDbContext))]
    [Migration("20190311120116_IsOwner_Field")]
    partial class IsOwner_Field
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "30b46aae-6c25-4e3a-bcc1-24226fefaa1b",
                            ConcurrencyStamp = "638c72e2-ecab-4bc8-9a9b-1d0a3fe2dd1f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TWork.Models.Entities.COMMENT", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ANSWER_ID");

                    b.Property<string>("CONTENT");

                    b.Property<int?>("PARENT_COMMENT_ID");

                    b.Property<int>("TASK_ID");

                    b.Property<string>("USER_ID");

                    b.HasKey("ID");

                    b.HasIndex("ANSWER_ID");

                    b.HasIndex("PARENT_COMMENT_ID");

                    b.HasIndex("TASK_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("COMMENTs");
                });

            modelBuilder.Entity("TWork.Models.Entities.MESSAGE", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("COMMENT_ID");

                    b.Property<bool>("IS_READED");

                    b.Property<int?>("MESSAGE_TYPE_ID");

                    b.Property<DateTime>("SEND_DATE");

                    b.Property<int?>("TEAM_ID");

                    b.Property<string>("TEXT");

                    b.Property<string>("USER_FROM_ID");

                    b.Property<string>("USER_TO_ID");

                    b.HasKey("ID");

                    b.HasIndex("COMMENT_ID");

                    b.HasIndex("MESSAGE_TYPE_ID");

                    b.HasIndex("TEAM_ID");

                    b.HasIndex("USER_FROM_ID");

                    b.HasIndex("USER_TO_ID");

                    b.ToTable("MESSAGEs");
                });

            modelBuilder.Entity("TWork.Models.Entities.MESSAGE_TYPE", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NAME");

                    b.HasKey("ID");

                    b.ToTable("MESSAGE_TYPEs");
                });

            modelBuilder.Entity("TWork.Models.Entities.ROLE", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CAN_ASSIGN_TASK");

                    b.Property<bool>("CAN_COMMENT");

                    b.Property<bool>("CAN_CREATE_TASK");

                    b.Property<bool>("CAN_MANAGE_USERS");

                    b.Property<string>("DESCRIPTION");

                    b.Property<bool>("IS_REQUIRED");

                    b.Property<bool>("IS_TEAM_OWNER");

                    b.Property<string>("NAME");

                    b.HasKey("ID");

                    b.ToTable("ROLEs");
                });

            modelBuilder.Entity("TWork.Models.Entities.TASK", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CREATE_TIME");

                    b.Property<DateTime?>("DEATHLINE");

                    b.Property<string>("DESCRIPTION");

                    b.Property<DateTime?>("END_TIME");

                    b.Property<DateTime?>("START_TIME");

                    b.Property<int>("TASK_STATUS_ID");

                    b.Property<int>("TEAM_ID");

                    b.Property<string>("TITLE");

                    b.Property<string>("USER_ID");

                    b.HasKey("ID");

                    b.HasIndex("TASK_STATUS_ID");

                    b.HasIndex("TEAM_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("TASKs");
                });

            modelBuilder.Entity("TWork.Models.Entities.TASK_STATUS", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NAME");

                    b.HasKey("ID");

                    b.ToTable("TASK_STATUSes");
                });

            modelBuilder.Entity("TWork.Models.Entities.TEAM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NAME");

                    b.HasKey("ID");

                    b.ToTable("TEAMs");
                });

            modelBuilder.Entity("TWork.Models.Entities.USER", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TWork.Models.Entities.USER_TEAM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TEAM_ID");

                    b.Property<string>("USER_ID");

                    b.HasKey("ID");

                    b.HasIndex("TEAM_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("USERS_TEAMs");
                });

            modelBuilder.Entity("TWork.Models.Entities.USER_TEAM_ROLES", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ROLE_ID");

                    b.Property<int>("TEAM_ID");

                    b.Property<string>("USER_ID");

                    b.HasKey("ID");

                    b.HasIndex("ROLE_ID");

                    b.HasIndex("TEAM_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("USER_TEAM_ROLEs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TWork.Models.Entities.USER")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TWork.Models.Entities.USER")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TWork.Models.Entities.USER")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TWork.Models.Entities.USER")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TWork.Models.Entities.COMMENT", b =>
                {
                    b.HasOne("TWork.Models.Entities.COMMENT", "ANSWER")
                        .WithMany()
                        .HasForeignKey("ANSWER_ID");

                    b.HasOne("TWork.Models.Entities.COMMENT", "PARENT_COMMENT")
                        .WithMany()
                        .HasForeignKey("PARENT_COMMENT_ID");

                    b.HasOne("TWork.Models.Entities.TASK", "TASK")
                        .WithMany("COMMENTs")
                        .HasForeignKey("TASK_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TWork.Models.Entities.USER", "USER")
                        .WithMany("COMMENTs")
                        .HasForeignKey("USER_ID");
                });

            modelBuilder.Entity("TWork.Models.Entities.MESSAGE", b =>
                {
                    b.HasOne("TWork.Models.Entities.COMMENT", "COMMENT")
                        .WithMany()
                        .HasForeignKey("COMMENT_ID");

                    b.HasOne("TWork.Models.Entities.MESSAGE_TYPE", "MESSAGE_TYPE")
                        .WithMany()
                        .HasForeignKey("MESSAGE_TYPE_ID");

                    b.HasOne("TWork.Models.Entities.TEAM", "TEAM")
                        .WithMany()
                        .HasForeignKey("TEAM_ID");

                    b.HasOne("TWork.Models.Entities.USER", "USER_FROM")
                        .WithMany()
                        .HasForeignKey("USER_FROM_ID");

                    b.HasOne("TWork.Models.Entities.USER", "USER_TO")
                        .WithMany()
                        .HasForeignKey("USER_TO_ID");
                });

            modelBuilder.Entity("TWork.Models.Entities.TASK", b =>
                {
                    b.HasOne("TWork.Models.Entities.TASK_STATUS", "TASK_STATUS")
                        .WithMany()
                        .HasForeignKey("TASK_STATUS_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TWork.Models.Entities.TEAM", "TEAM")
                        .WithMany("TASKs")
                        .HasForeignKey("TEAM_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TWork.Models.Entities.USER", "USER")
                        .WithMany("TASKs")
                        .HasForeignKey("USER_ID");
                });

            modelBuilder.Entity("TWork.Models.Entities.USER_TEAM", b =>
                {
                    b.HasOne("TWork.Models.Entities.TEAM", "TEAM")
                        .WithMany("USERS_TEAMs")
                        .HasForeignKey("TEAM_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TWork.Models.Entities.USER", "USER")
                        .WithMany("USERS_TEAMs")
                        .HasForeignKey("USER_ID");
                });

            modelBuilder.Entity("TWork.Models.Entities.USER_TEAM_ROLES", b =>
                {
                    b.HasOne("TWork.Models.Entities.ROLE", "ROLE")
                        .WithMany("USER_TEAM_ROLEs")
                        .HasForeignKey("ROLE_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TWork.Models.Entities.TEAM", "TEAM")
                        .WithMany("USER_TEAM_ROLEs")
                        .HasForeignKey("TEAM_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TWork.Models.Entities.USER", "USER")
                        .WithMany("USER_TEAM_ROLEs")
                        .HasForeignKey("USER_ID");
                });
#pragma warning restore 612, 618
        }
    }
}
